name: Github Action
on: [push, pull_request]

jobs:
  clean:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Black formatting
        uses: lgeiger/black-action@v1.0.1
        with:
          args: "./"

      - name: Run isort
        uses: jamescurtin/isort-action@master
        with:
          configuration: --profile black

      - name: Check for modified files
        id: git-check
        run: echo ::set-output name=modified::$(if git diff-index --quiet HEAD --; then echo "false"; else echo "true"; fi)

      - name: Push changes
        if: steps.git-check.outputs.modified == 'true'
        run: |
          git config --global user.email "r_s@me.com"
          git config --global user.name "romainsacchi"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          git checkout $GITHUB_HEAD_REF
          git commit -am "Black reformating"
          git push
  lint:
    runs-on: ubuntu-latest
    needs: clean
    steps:

      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          # Full git history is needed to get a proper list
          # of changed files within `super-linter`
          fetch-depth: 0

      - name: Super-Linter
        uses: github/super-linter@v4
        env:
          ERRORS: false
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_PYTHON: true
          DEFAULT_BRANCH: master
          IGNORE_GITIGNORED_FILES: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}

  build:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest]

    needs: clean

    steps:
      - uses: actions/checkout@v2

      - name: Install python version
        uses: gabrielfalcao/pyenv-action@v7
        with:
          default: 3.9.0
          command: pip install -U pip  # upgrade pip after installing python

      - name: create environment
        run: pyenv local 3.9.0 && python -mvenv .venv390

      - name: Install dependencies
        run: |
          pip install pathlib
          pip install -r requirements.txt --upgrade pip
          pip install -e .
          pip install pytest
          pip install pytest-cov
          pip install coveralls

      - name: Run tests
        run: |
          pytest -m "not ecoinvent" -s --cov=brightpath
          coveralls -v --service=github-actions
        env:
          GITHUB_TOKEN: ${{ secrets.COVERALLS }}
          IAM_FILES_KEY: ${{ secrets.IAM_FILES_KEY }}

  Pypi:
    runs-on: ubuntu-latest
    needs: build

    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu-latest" ]
        python-version: [ "3.9", "3.10" ]

    steps:
      - uses: actions/checkout@v2

      - name: Install pypa/build
        run: >-
          python -m
          pip install
          build
          --user

      - name: Build a binary wheel and a source tarball
        run: >-
          python -m
          build
          --sdist
          --wheel
          --outdir dist/
          .

      - name: Publish distribution ðŸ“¦ to PyPI if Release
        if: startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: ${{ secrets.PYPI_USER }}
          password: ${{ secrets.PYPI_PASSWORD }}
          skip_existing: true

      - name: Publish distribution ðŸ“¦ to Test PyPI if Push
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: ${{ secrets.TEST_PYPI_USER }}
          password: ${{ secrets.TEST_PYPI_PASSWORD }}
          repository_url: https://test.pypi.org/legacy/
          skip_existing: true

  conda:
    name: (${{ matrix.python-version }}, ubuntu-latest)
    runs-on: ubuntu-latest
    needs: build

    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
        python-version: ["3.9", "3.10"]
    steps:
      - uses: actions/checkout@v2
      - uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python-version }}
          channels: conda-forge,cmutel,konstantinstadler,haasad,pascallesage,romainsacchi
          allow-softlinks: true
          channel-priority: strict
          auto-update-conda: true
          activate-environment: test

      - name: Conda info
        shell: bash -l {0}
        run: conda info

      - name: Git checkout
        uses: actions/checkout@v1
      - name: Branch name
        run: echo running on branch ${GITHUB_REF##*/}

      - name: Publish distribution ðŸ“¦ to Anaconda if Push from non-master branch
        if: github.ref != 'refs/heads/master'
        shell: bash -l {0}

        run: |
          PKG_NAME=brightpath
          USER=romainsacchi
          conda install anaconda-client
          conda install conda-build
          conda install conda-verify
          conda install pytest
          mkdir ~/conda-bld
          conda config --set anaconda_upload no
          export CONDA_BLD_PATH=~/conda-bld
          export VERSION=`date +%Y.%m.%d`
          conda build "conda/" --old-build-string
          conda-verify $CONDA_BLD_PATH/noarch/$PKG_NAME-$VERSION-py_0.tar.bz2
          ls $CONDA_BLD_PATH/noarch/
          anaconda -t ${{ secrets.ANACONDA_CLOUD }} upload -u $USER $CONDA_BLD_PATH/noarch/$PKG_NAME-$VERSION-py_0.tar.bz2 --force
  testconda:
    name: (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: conda

    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
        python-version: ["3.9", "3.10"]
    steps:
      - uses: actions/checkout@v2
      - uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python-version }}
          channels: conda-forge,cmutel,konstantinstadler,haasad,pascallesage,romainsacchi
          allow-softlinks: true
          channel-priority: strict
          auto-update-conda: true
          activate-environment: test

      - name: Pull distribution ðŸ“¦ from Anaconda and test it if master branch
        if: github.ref == 'refs/heads/master'
        shell: bash -l {0}

        run: |
          conda install -c romainsacchi brightpath
          conda update brightpath
          conda install pytest
          conda install bottleneck
          pytest -m "not ecoinvent"
        env:
          IAM_FILES_KEY: ${{ secrets.IAM_FILES_KEY }}

      - name: Pull distribution ðŸ“¦ from Anaconda and test it if non-master branch
        if: github.ref != 'refs/heads/master'
        shell: bash -l {0}

        run: |
          conda install -c romainsacchi brightpath-dev
          conda update brightpath-dev
          conda install pytest
          conda install bottleneck
          pytest -m "not ecoinvent"
        env:
          IAM_FILES_KEY: ${{ secrets.IAM_FILES_KEY }}